{
    "token_map" : {
        "0.0" : "Reputation Token (REP)",
        "1.0" : "Share Token (SHARE)",
        "2.0" : "Dispute Crowdsourcer Token",
        "3.0" : "Fee Window Token (PT)",
        "4.0" : "Fee Token (FEE)"
    },
    "event_map_dapp" : {
        "undecoded event": "undecoded event",
        "OrderCreated": "create order",
        "ApprovalForAll": "approve for all",
        "FeeWindowRedeemed": "redeem fee window",
        "OrderFilled": "fill order",
        "OrderCanceled": "cancel order",
        "TokensMinted": "minted tokens",
        "FeeWindowCreated": "create fee window",
        "CompleteSetsSold": "sell complete sets",
        "TokensTransferred": "transferred tokens",
        "TokensBurned": "burned tokens",
        "Transfer": "transfer tokens",
        "Approval": "give approval to transfer tokens",
        "UniverseCreated": "create universe",
        "MarketCreated": "create market",
        "MarketFinalized": "finalize market",
        "DisputeCrowdsourcerCreated": "create dispute",
        "InitialReporterRedeemed": "redeem as initial reporter",
        "DisputeCrowdsourcerRedeemed": "redeem dispute crowdsourcer",
        "MarketTransferred": "transfer market",
        "InitialReportSubmitted": "submit initial report",
        "TradingProceedsClaimed": "claim trading proceeds",
        "DisputeCrowdsourcerContribution": "contribute to dispute",
        "DisputeCrowdsourcerCompleted": "complete dispute",
        "CompleteSetsPurchased": "purchase complete sets",
        "CrowdsourcerCreated": "create crowdsourcer",
        "Initialized": "initialize crowdsourcer",
        "Created": "create new accounting instance",
        "DisputerCreated": "create disputer for crowdsourcer",
        "ContributionAccepted": "accept contribution to crowdsourcer",
        "CrowdsourcerFinalized": "finalize crowdsourcer",
        "ProceedsWithdrawn": "withdraw proceeds from crowdsourcer",
        "FeesWithdrawn": "withdraw fees from crowdsourcer",
        "ContributionWithdrawn": "withdraw contribution to crowdsourcer",
        "Mint": "mint tokens",
        "Burn": "burn tokens"
    },
    "event_map_non_dapp" : {
        "Registered": "register new function signature in registry",
        "Transfer": "transfer token",
        "NewCup": "create Collateralized Debt Position",
        "Deposit": "make deposit",
        "LogNewCup": "new Collateralized Dept Position",
        "LogItemUpdate": "update item in Collateralized Dept Position",
        "LogTake": "take",
        "LogTrade": "trade",
        "Withdrawal": "withdraw tokens",
        "Mint": "mint",
        "Created": "create a proxy contract",
        "LogSetOwner": "update owner of the proxy",
        "CloseCup": "close Collateralized Debt Position",
        "Burn": "burn tokens",
        "TransactionRelayed": "relay transaction",
        "Deposited": "deposit Ether",
        "Approval": "approve a token transfer",
        "ApprovalForAll": "approve for all",
        "Received": "receive tokens",
        "Filled": "fill (AirSwapExchange)",
        "LogSweep": "log a sweep",
        "LogFill": "log a fill",
        "Withdraw": "withdraw tokens (2)",
        "MakeSellOrder": "make a sell order",
        "TakeBuyOrder": "take a buy order",
        "Confirmation": "confirm",
        "Execution": "execute",
        "CancelSellOrder": "cancel a sell order",
        "TokensFlushed": "flush tokens",
        "TakeSellOrder": "take a sell order",
        "LogDebtOrderFilled": "fill a debt order",
        "LogSimpleInterestTermStart": "show simple interest term start",
        "LogInsertEntry": "insert entry",
        "CollateralLocked": "lock collateral",
        "LogRepayment": "repay",
        "LogRegisterRepayment": "register repayment",
        "CollateralReturned": "return collateral",
        "Trade": "trade tokens",
        "LogModifyEntryBeneficiary": "modify entry beneficiary",
        "CollateralSeized": "seize collateral",
        "ExecuteTrade": "execute a trade (Kyber network)",
        "KyberTrade": "execute a Kyber trade (Kyber Network)",
        "TradeExecute": "execute a trade (Kyber reserve",
        "AssignBurnFees": "assign burn fees",
        "SupplyReceived": "receive supply",
        "BorrowTaken": "take a borrow",
        "WithdrawFunds": "withdraw funds",
        "EtherReceival": "receive Ether",
        "AssignFeeToWallet": "assign a fee wallet",
        "Fill": "fill (Zero Ex)",
        "BorrowRepaid": "repay borrow",
        "SupplyWithdrawn": "withdraw supply",
        "BorrowLiquidated": "liquidate a borrow",
        "AddLiquidity": "add liquidity",
        "TokenPurchase": "purchase a token",
        "EthPurchase": "purchase Ether",
        "RemoveLiquidity": "remove liquidity",
        "Debuglog": "debug log",
        "Transacted": "transacted",
        "Failure": "failure occurred",
        "DebtOfferFilled": "fill debt offer",
        "Match": "match",
        "LogRebalance": "rebalance",
        "LogOrderCreated": "create an order",
        "LogTransferFromAccount": "transfer from account",
        "UserBalanceChange": "change user balance",
        "TokenWithdrawal": "withdraw tokens (3)",
        "LogRelease": "release",
        "LogTransfer": "transfer",
        "FundsMigrated": "migrate funds",
        "LogOrderCancelled": "cancel order",
        "LogLock": "lock",
        "LogOrderDefaulted": "default order",
        "Issuance": "issue",
        "Conversion": "convert",
        "PriceDataUpdate": "update price data",
        "LogOrderRepaid": "repay log order",
        "AmguPaid": "pay Amgu",
        "TransactionExecuted": "execute transaction",
        "BalanceIncrease": "increase balance",
        "BalanceDecrease": "decrease balance",
        "LogWithdraw": "withdraw",
        "LogOrderSettlement": "settle order",
        "Submission": "submit",
        "TokenExchanged": "exchange tokens",
        "LogOrderLiquidatedByUser": "buyer liquidates order",
        "LogNote": "note",
        "LogExecute": "execute (2)",
        "AccrueInterest": "accrue interest",
        "Borrow": "borrow",
        "InvocationSuccess": "invoke successfully",
        "Redeem": "redeem",
        "RepayBorrow": "repay a borrow",
        "LiquidateBorrow": "liquidate a borrow (2)",
        "Lock": "lock (2)",
        "LockToken": "lock token",
        "LogUpdateLoanAsLender": "update loan as lender",
        "LogLoanTaken": "take loan",
        "LogPayInterestForOrder": "pay interest for order",
        "LogLoanClosed": "close loan",
        "LogPayInterestForOracle": "pay interest for oracle",
        "Release": "release (2)",
        "CreatedInvestment": "create investment",
        "LogKill": "kill",
        "SoldInvestment": "sell investment",
        "LogSwap": "swap",
        "LogSwapCollection": "swap collection",
        "Log": "log",
        "NonceUpdated": "update nonce",
        "LimitOrderExecute": "execute limit order",
        "PaymentSent": "send payment",
        "ReceiverSpent": "receiver spent",
        "OneInchFeePaid": "pay OneInch fee",
        "Destruction": "destruct",
        "CreatedCompoundOrder": "create compound order",
        "SoldCompoundOrder": "sell compound order",
        "ExchangeDeposit": "exchange deposit",
        "InvestmentRemoved": "remove investment",
        "InvestmentAdded": "add investment",
        "Claim": "claim",
        "LogDirectWithdrawal": "withdraw directly",
        "LogDeposit": "deposit",
        "LogMake": "make",
        "LogSortedOffer": "makes sorted offer",
        "Swapped": "swap (OneInch Exchange)",
        "History": "history",
        "ProxyDeposit": "deposit (proxy)",
        "DepositForTokenReceived": "receive deposit for tokens",
        "Swap": "swap token(Kyber Network)",
        "LogWithdrawal": "withdraw (3)",
        "Transferred": "transfer (2)",
        "Initialized": "initialize",
        "DepositToken": "deposit token",
        "LogLiquidate": "liquidate",
        "Increment": "increment",
        "Decrement": "decrement",
        "OwnershipTransferred": "transfer ownership",
        "MintOnDeposit": "mint on deposit",
        "InterestStreamRedirected": "redirect interest stream",
        "BalanceTransfer": "transfer balance",
        "BurnOnLiquidation": "burn on liquidation",
        "LogFee": "fee",
        "LogTokenSwap": "swap token (CErc20Swap)",
        "TokenTrade": "trade token",
        "Repay": "repay (2)",
        "UpdatedAvailableLimit": "update available limit",
        "ExecutedTransaction": "execute transaction (2)",
        "CreateSalary": "create salary",
        "CreateStream": "create stream",
        "CalledContract": "call contract",
        "WithdrawFromSalary": "withdraw from salary",
        "WithdrawFromStream": "withdraw from stream",
        "CancelSalary": "cancel salary",
        "CancelStream": "cancel stream",
        "TokenExchangeUnderlying": "exchange token (underlying)",
        "LOG_JOIN": "join",
        "ERC20BridgeTransfer": "ERC20 bridge transfer",
        "LOG_EXIT": "exit",
        "LOG_SWAP": "swap (BPool)",
        "Distributed": "distribute",
        "Sent": "send",
        "residualETH": "residual Ether",
        "details": "details",
        "_deposit": "deposit (2)",
        "ApprovedAndCalledContract": "approve and call contract",
        "Withdrawn": "withdraw (2)",
        "PairCreated": "create pair",
        "Sync": "synchronize",
        "LogStableTokenReceived": "receive stable token",
        "LogEthReceived": "receive Ether (2)",
        "FillOrder": "fill order",
        "LOG_NEW_POOL": "create new pool",
        "Boost": "boost",
        "LogCast": "cast",
        "LogPoolBorrow": "borrow pool",
        "LogEvent": "event occurred",
        "TokenExchange": "exchange token (Vyper)",
        "TransactionExecution": "execute transaction (3)",
        "DelegateVotesChanged": "change delegate votes",
        "DappLogicEntered": "enter DApp logic",
        "liquidityTokensQty": "liquidity tokens transferred",
        "Redeemed": "redeem (2)",
        "LogAccountCreated": "create account",
        "LogEnable": "enable",
        "LogDisable": "disable",
        "TokenRateUpdate": "update token rate",
        "BidPlaced": "place bid",
        "Zapin": "Zapin occurs",
        "LogPoolPayback": "payback pool",
        "ContractFallbackCallFailed": "failing of contract fallback call ",
        "FeeDistributed": "distribute fee",
        "Borrowed": "borrow (2)",
        "Tax": "tax",
        "TokensMinted": "min tokens",
        "TokenBalanceChanged": "change token balance",
        "ExecuteTransactionStatus": "execute transaction status",
        "TokensTransferred": "transfer tokens",
        "TokenWithdraw": "withdraw token",
        "KeyRingDeployed": "deploy key ring",
        "SmartWalletDeployed": "deploy smart wallet",
        "FeeTaken": "take fee",
        "ListReservePairs": "reserve pairs",
        "TokenListed": "list token",
        "WalletRegisteredForFeeSharing": "register wallet for sharing",
        "WalletFeesSet": "set wallet fees",
        "DistributionUpdated": "update distribution",
        "Setup": "setup",
        "Upgraded": "upgrade",
        "Approved": "approve",
        "LogEnterMarket": "enter market",
        "RemoveReserveFromStorage": "remove reserve from storage"
    },
    "calls_map_dapp" : {
        "CALL": "call and transfer Ether",
        "publicTradeWithLimit": "call to trade with limit",
        "publicTrade": "call to initiate a trade",
        "publicFillBestOrder": "call to fill best order",
        "publicFillBestOrderWithLimit": "call to fill best order with limit",
        "createYesNoMarket": "call to create yes-no-market",
        "createCategoricalMarket": "call to create categorical market",
        "createScalarMarket": "call to create scalar market",
        "createMarket": "call to create market",
        "publicCreateOrder": "call to create order",
        "publicBuyCompleteSets": "call to purchase complete sets",
        "publicFillOrder": "call to fill order"    
    },
    "calls_zero_value_map_dapp" : {
        "CALL": "call without Ether transfer",
        "publicTradeWithLimit": "call to trade with limit",
        "publicTrade": "call to initiate a trade",
        "publicFillBestOrder": "call to fill best order",
        "publicFillBestOrderWithLimit": "call to fill best order with limit",
        "createYesNoMarket": "call to create yes-no-market",
        "createCategoricalMarket": "call to create categorical market",
        "createScalarMarket": "call to create scalar market",
        "createMarket": "call to create market",
        "publicCreateOrder": "call to create order",
        "publicBuyCompleteSets": "call to purchase complete sets",
        "publicFillOrder": "call to fill order",
        "setController": "call to set controller",
        "getInitializedCrowdsourcer": "call to initialize crowdsourcer",
        "isInitialized": "call to check if initialization happened",
        "initialize": "call to initialize",
        "create": "call to create",
        "getDisputeRoundDurationInSeconds": "call to get dispute round duration in seconds",
        "isForking": "call to check if fork happened",
        "getReputationToken": "call to get REP token",
        "createGenesisUniverse": "call to create genesis universe",
        "createUniverse": "call to create universe",
        "createReputationToken": "call to create REP token",
        "getParentUniverse": "call to get parent universe",
        "logReputationTokenMinted": "call to log REP token minted",
        "logReputationTokensTransferred": "call to log REP token transferred",
        "createFeeWindow": "call to create fee window",
        "logFeeWindowCreated": "call to log fee window creation",
        "logMarketCreated": "call to log market creation",
        "getTimestamp": "call to get timestamp",
        "getOrCacheMarketCreationCost": "call to get or cache market creation cost",
        "createFeeToken": "call to create fee token",
        "getOrCacheDesignatedReportNoShowBond": "call to get or cache designated report no show bond",
        "getOrCacheValidityBond": "call to get or cache validity bond",
        "createInitialReporter": "call to create initial reporter",
        "createMailbox": "call to create mailbox",
        "createMap": "call to create map",
        "createShareToken": "call to create share token",
        "isKnownUniverse": "call to check if known universe",
        "isContainerForMarket": "call to check if container market",
        "createOrder": "call to create order",
        "trustedTransfer": "call for trusted transfer",
        "findBoundingOrders": "call to find bounding orders",
        "logOrderCreated": "call to log order creation",
        "fillOrder": "call to fill order",
        "buyCompleteSets": "call to buy complete sets",
        "logOrderFilled": "call to log order filling",
        "incrementOpenInterest": "call to increment open interest",
        "logShareTokensTransferred": "call to log share tokens transfer",
        "logShareTokenMinted": "call to log share token minted",
        "isContainerForShareToken": "call to check if container for share token",
        "logFeeWindowMinted": "call to log fee window minted",
        "isContainerForFeeWindow": "call to check if container for fee window",
        "cancelOrder": "call to cancel order",
        "logOrderCanceled": "call to log order cancellation",
        "getOrCacheDesignatedReportStake": "call to get or cache designated reporter stake",
        "getOrCreateNextFeeWindow": "call to get or create next fee window",
        "logInitialReportSubmitted": "call to log initial report submission",
        "isContainerForReportingParticipant": "call to check if container for reporting participant",
        "logFeeTokenMinted": "call to log fee token minted",
        "isContainerForFeeToken": "call to check if container for fee token",
        "sellCompleteSets": "call to sell complete sets",
        "decrementOpenInterest": "call to decrement open interest",
        "getOrCacheReportingFeeDivisor": "call to get or cache reporting fee divisor",
        "getRepPriceInAttoEth": "call to get REP price in Atto ETH",
        "logShareTokenBurned": "call to log share token burned",
        "logFeeWindowBurned": "call to log fee window burned",
        "logFeeWindowRedeemed": "call to log fee window redeemed",
        "buyParticipationTokens": "call to buy participation token",
        "publicSellCompleteSets": "call to sell complete sets (public)",
        "logCompleteSetsSold": "call to log complete sets sold",
        "createDisputeCrowdsourcer": "call to create dispute crowdsourcer",
        "disputeCrowdsourcerCreated": "call to notify about dispute crowdsourcer creation",
        "logDisputeCrowdsourcerContribution": "call to log dispute crowdsourcer contribution",
        "getDisputeThresholdForFork": "call to get dispute threshold for fork",
        "logDisputeCrowdsourcerCompleted": "call to log dispute crowdsourcer completion",
        "logDisputeCrowdsourcerTokensMinted": "call to log dispute crowdsourcer tokens minted",
        "getForkingMarket": "call to get forking market",
        "decrementOpenInterestFromMarket": "call to decrement open interest from market",
        "logMarketFinalized": "call to log market finalization",
        "getOrCreateFeeWindowBefore": "call to get or create fee window before",
        "logInitialReporterRedeemed": "call to log reporter redemption",
        "logFeeTokenBurned": "call to log fee token burning",
        "claimTradingProceeds": "call to claim trading proceeds",
        "logTradingProceedsClaimed": "call to log trading proceeds claim",
        "getCurrentFeeWindow": "call to get current fee window",
        "logDisputeCrowdsourcerTokensBurned": "call to log dispute crowdsourcer tokens burned",
        "logDisputeCrowdsourcerRedeemed": "call to log dispute crowdsourcer redemption",
        "logCompleteSetsPurchased": "call to log complete set purchase",
        "logDisputeCrowdsourcerTokensTransferred": "call to log dispute crowdsourcer tokens transfer",
        "contribute": "call to contribute",
        "hasDisputed": "call to check if disputed",
        "addFeesOnTop": "call to add fees on top",
        "getREP": "call to get REP",
        "dispute": "call to dispute",
        "withdrawProceeds": "call to withdraw proceeds",
        "isFinalized": "call to check if finalized",
        "getDisputeTokenAddress": "call to get dispute token address",
        "approveManagerToSpendDisputeTokens": "call to approve manager to spend dispute tokens",
        "finalize": "call to finalize",
        "calculateProceeds": "call to calculate proceeds",
        "withdrawFees": "call to withdraw fees",
        "calculateFees": "call to calculate fees",
        "getContractFeeReceiver": "call to get contract fee receiver",
        "feeReceiver": "call fee receiver",
        "withdrawContribution": "call to withdraw contribution",
        "getTotalContribution": "call to get total contribution",
        "getTotalFeesOffered": "call to get total fees offered",
        "publicBuyCompleteSetsWithCash": "call to buy complete sets with cash (public)",
        "logMarketTransferred": "call to log market transfer",
        "publicBuy": "call to buy (public)",
        "logFeeWindowTransferred": "call to log fee window transfer",
        "transferOwnership": "call to transfer ownership",
        "setRepPriceInAttoEth": "call to set REP price in Atto ETH",
        "approve": "call to approve"
    },    
    "calls_map_non_dapp" : {
        "CALL": "call and transfer Ether",
        "openCdp": "call to open a Collateralized Dept Position",
        "deposit": "call to deposit",
        "depositFor": "call to deposit Ether for an address",
        "fill": "call to execute trade between maker and taker",
        "takeSellOrder": "call to take a sell order",
        "executeOrders": "call to execute token orders",
        "performBuy": "call to perform a buy",
        "trade": "call to facilitate a token trade",
        "tradeWithHint": "call to perform a token trade with a hint",
        "marketBuyOrdersWithEth": "call to execute a market buy operation with Ether (ETH)",
        "addLiquidity": "call to add liquidity",
        "ethToTokenSwapInput": "call for Ether to token swap input",
        "ethToTokenSwapOutput": "call for Ether to token swap output",
        "ethToTokenTransferInput": "call for Ether to token transfer input",
        "ethToTokenTransferOutput": "call for Ether to token transfer output",
        "performBuyOrder": "call to perform a buy order",
        "performRebalance": "call to rebalance a user portfolio",
        "swapEtherToToken": "call to swap Ether for tokens",
        "performBuyOrder_": "call to perform a buy order (2)",
        "quickConvert": "call to quick convert a token",
        "convertForPrioritized2": "call to convert a token (prioritized 2)",
        "convertForPrioritized3": "call to convert a token (prioritized 3)",
        "payAmguInEther": "call to pay for AMGU tokens in Ether",
        "execute": "call to delegate a call to an external proxy",
        "aggregate": "call to aggregate token swaps",
        "performSwapCollection": "call to perform swaps of a collection",
        "depositEther": "call to deposit Ether",
        "mint": "call to mint new token",
        "repayBorrow": "call to repay a borrow",
        "batchExec": "call to execute a batch transaction",
        "swapExactETHAndAddLiquidity": "call to swap exact Ether and add liquidity",
        "fundWithAward": "call to handle donated Ether",
        "repayBorrowBehalf": "call to repay a borrow belonging to a borrower",
        "multiSwap": "call to perform a multi-path swap",
        "batchEthInSwapExactIn": "call for batched swap of Ether for tokens",
        "multihopBatchSwapExactOut": "call for multihop batch swap",
        "swapExactETHForTokensSupportingFeeOnTransferTokens": "call to swap exact Ether for tokens supporting fees on transfer tokens",
        "swap": "call to swap tokens (1inch Exchange)",
        "swapTokenToToken": "call to swap tokens (Saver Exchange)",
        "init": "call to initialize multi-token distribution (MultiToken)",
        "liquidate borrower": "call to liquidate the borrower (Compound Ether)",
        "convert": "call to convert a token (Bancor Network, version 1)",
        "convert2": "call to convert a token (Bancor Network, version 2)",
        "convertByPath": "call to convert a token by following conversion path (Bancor Network)",
        "fillOrder": "call to fill an order (Zero Ex)",
        "marketSellOrdersFillOrKill": "call to execute market sell orders (Zero Ex)",
        "marketBuyOrdersFillOrKill": "call to execute market buy orders (Zero Ex)",
        "marketSellOrdersWithEth": "call to executing market sell orders with Ether (Zero Ex)",
        "marketSellOrdersNoThrow": "call to executing market sell orders while ignoring errors (Zero Ex)",
        "marketSellAmountWithEth": "call to execute market sell with Ether (Zero Ex)",
        "performOrder": "call to perform an order (Zero Ex)",
        "fillOrKillOrder": "call to fill or kill an order (Zero Ex)",
        "executeTransaction": "call to execute a transaction (Zero Ex)",
        "fillOrderWithETH": "call to fill an order with Ether (Zero Ex)",
        "batchEthInSwapExactOut": "call to perform batch swapping of ETH",
        "multipleZapIn": "call to add liquidity to multiple pools (Uniswap)",
        "addLiquidityETH": "call to add liquidity (Uniswap)",
        "swapETHForExactTokens": "call to swap Ether for exact tokens (Uniswap)",
        "swapExactETHForTokens": "call to swap exact Ether for tokens (Uniswap)",
        "ZapIn": "call to invest in Uniswap V2 pair (Uniswap)",
        "EasyZapIn": "call to invest in a balancer pool (Uniswap)",
        "swapMulti": "call to swap across multiple tokens (Uniswap)",
        "tradeWithHintAndFee": "call to trade with hint and fee (Kyber Network)",
        "handleFees": "call to handle fees (Kyber Network)",
        "executeSwapMyETHToStable": "call to swap Ether to a stable token (Kyber Network)",
        "executeTrade": "call to trade tokens (Kyber Network)",
        "executeSwap": "call to swap tokens (Kyber Network)"
    },
    "delegatecalls_map_dapp" : {
        "DELEGATECALL": "delegate call",
        "getReputationToken": "delegate call to get REP token",
        "approve": "delegate call to approve",
        "getUniverse": "delegate call to get universe",
        "getDisputeRoundDurationInSeconds": "delegate call to get dispute round duration in seconds",
        "derivePayoutDistributionHash": "delegate call to derive payout distribution hash",
        "isForking": "delegate call to check if universe is forking",
        "getFeeWindow": "delegate call to get fee window",
        "getNumParticipants": "delegate call to get number of participants",
        "getStartTime": "delegate call to get start time",
        "isFinalized": "delegate call to check if market is finalized",
        "getReportingParticipant": "delegate call to get reporting participant",
        "getStake": "delegate call to get stake",
        "getPayoutDistributionHash": "delegate call to get payout distribution hash",
        "initialize": "delegate call to initialize",
        "getTotalTheoreticalSupply": "delegate call to get total theoretical supply",
        "getParentUniverse": "delegate call to get parent universe",
        "migrateBalancesFromLegacyRep": "delegate call to migrate balances from legacy REP",
        "transfer": "delegate call to transfer token",
        "createYesNoMarket": "delegate call to create yes-no-market",
        "getNumMarkets": "delegate call to get number of markets",
        "getNumDesignatedReportNoShows": "delegate call to get number of designated reporter no-shows",
        "trustedUniverseTransfer": "delegate call for trusted universe transfer",
        "getEndTime": "delegate call to get end time",
        "balanceOf": "delegate call to get balance",
        "getOrCacheMarketCreationCost": "delegate call to get or cache market creation cost",
        "getOrCacheDesignatedReportNoShowBond": "delegate call to get or cache designated reporter no-show-bond",
        "getOrCacheValidityBond": "delegate call to get or cache validity bond",
        "getNumInvalidMarkets": "delegate call to get number of invalid markets",
        "getDenominationToken": "delegate call to get denomination token",
        "createCategoricalMarket": "delegate call to create a categorical market",
        "isContainerForMarket": "delegate call to check if container for market",
        "depositEtherFor": "delegate call to deposit Ether for Cash token",
        "assertBalances": "delegate call to assert balances",
        "getNumberOfOutcomes": "delegate call to get the number of outcomes",
        "getNumTicks": "delegate call to get number of ticks",
        "getShareToken": "delegate call to get share token",
        "getOrderId": "delegate call to get order ID",
        "getAmount": "delegate call to get amount of an order",
        "saveOrder": "delegate call to save order",
        "transferFrom": "delegate call to transfer token on behalf of the owner",
        "getTotalEscrowed": "delegate call to get the total escrow",
        "totalSupply": "delegate call to get total supply",
        "incrementTotalEscrowed": "delegate call to increment the total escrowed",
        "getBestOrderId": "delegate call to get best order ID",
        "getPrice": "delegate call to get price",
        "getWorseOrderId": "delegate call to get worse order ID",
        "setPrice": "delegate call to set price",
        "withdrawEtherTo": "delegate call to withdraw Ether",
        "getMarket": "delegate call to get market",
        "getOutcome": "delegate call to get outcome",
        "getOrderType": "delegate call to get order type",
        "getOrderSharesEscrowed": "delegate call to get order shares escrowed",
        "getOrderCreator": "delegate call to get order creator",
        "allowance": "delegate call to get allowance",
        "recordFillOrder": "delegate call to record fill order",
        "createShares": "delegate call to create shares",
        "incrementOpenInterest": "delegate call to increment open interest",
        "decrementTotalEscrowed": "delegate call to decrement total escrow",
        "isContainerForShareToken": "delegate call to check for container for share token",
        "isBetterPrice": "delegate call to check for better price",
        "createScalarMarket": "delegate call to create scalar market",
        "buy": "delegate call to buy Atto tokens",
        "trustedFeeWindowTransfer": "delegate call for trusted fee window transfer",
        "isContainerForFeeWindow": "delegate call to check if container for fee window",
        "assertIsNotWorsePrice": "delegate call to assert is not worse price",
        "getBetterOrderId": "delegate call to get better order ID",
        "assertIsNotBetterPrice": "delegate call to assert is not better price",
        "isWorsePrice": "delegate call to check if worse price",
        "getOrderMoneyEscrowed": "delegate call to get order money escrowed",
        "removeOrder": "delegate call to remove order",
        "trustedOrderTransfer": "delegate call for trusted order transfer",
        "trustedFillOrderTransfer": "delegate call for trusted fill order transfer",
        "withdrawEtherToIfPossible": "delegate call to withdraw Ether if possible",
        "trustedCancelOrderTransfer": "delegate call for trusted cancel order transfer",
        "doInitialReport": "delegate call to do initial report",
        "getReportTimestamp": "delegate call to get report time stamp",
        "getDesignatedReporter": "delegate call to get designated reporter",
        "getOrCacheDesignatedReportStake": "delegate call to get or cache designated reporter stake",
        "trustedMarketTransfer": "delegate call for trusted market transfer",
        "getOrCreateNextFeeWindow": "delegate call to get or cache next fee window",
        "report": "delegate call to report",
        "getNumIncorrectDesignatedReportMarkets": "delegate call to get number of incorrect designated report markets",
        "mintFeeTokens": "delegate call to mint fee tokens",
        "isContainerForReportingParticipant": "delegate call to check if container for reporting participant",
        "mintForReportingParticipant": "delegate call to mint for reporting participant",
        "isContainerForFeeToken": "delegate call to check if container for fee token",
        "getAsAddressOrZero": "delegate call to get as address or zero",
        "getFeeToken": "delegate call to get fee token",
        "decrementOpenInterest": "delegate call to decrement open interest",
        "deriveMarketCreatorFeeAmount": "delegate call to derive market creator fee amount",
        "getOrCacheReportingFeeDivisor": "delegate call to get or cache reporting fee divisor",
        "destroyShares": "delegate call to destroy shares",
        "getMarketCreatorMailbox": "delegate call to get market creator mailbox",
        "redeem": "delegate call to redeem",
        "buyParticipationTokens": "delegate call to buy participant tokens",
        "trustedUniverseBuy": "delegate call for trusted universe buy",
        "contribute": "delegate call to contribute",
        "isActive": "delegate call to check if active",
        "add": "delegate call to add an entry to a map",
        "getSize": "delegate call to get size",
        "getDisputeThresholdForFork": "delegate call to get dispute threshold for fork",
        "migrate": "delegate call to migrate",
        "trustedReportingParticipantTransfer": "delegate call for trusted reporting participant transfer",
        "finalize": "delegate call to market",
        "getForkingMarket": "delegate call to get forking market",
        "isOver": "delegate call to check if fee window is over",
        "onMarketFinalized": "delegate call to update statistics once market is finalized",
        "decrementOpenInterestFromMarket": "delegate call to decrement open interest from market",
        "isInvalid": "delegate call to check validity",
        "depositEther": "delegate call to deposit Ether",
        "designatedReporterWasCorrect": "delegate call to check if designated reporter was correct",
        "designatedReporterShowed": "delegate call to check if designated reporter showed",
        "getWinningPayoutDistributionHash": "delegate call to get winning payout distribution hash",
        "getPayoutNumerator": "delegate call to get payout numerator",
        "redeemForReportingParticipant": "delegate call to redeem for reporting participant",
        "getOrCreateFeeWindowBefore": "delegate call to get or create fee window before",
        "feeWindowBurn": "delegate call to burn fee window",
        "getFinalizationTime": "delegate call to get finalization time",
        "getWinningPayoutNumerator": "delegate call to get winning payout numerator",
        "getCurrentFeeWindow": "delegate call to get current fee window",
        "liquidateLosing": "delegate call to liquidate losing",
        "decimals": "delegate call to get decimals",
        "getCrowdsourcer": "delegate call to get crowdsourcer",
        "transferOwnership": "delegate call to transfer ownership",
        "symbol": "delegate call to get symbol",
        "withdrawEther": "delegate call to withdraw Ether (2)",
        "migrateAllowancesFromLegacyRep": "delegate call to migrate allowance from legacy REP",
        "decreaseApproval": "delegate call to decrease approval"
    },
    "delegatecalls_map_non_dapp" : {
        "DELEGATECALL": "delegate call and transfer Ether",
        "sweep": "delegate call to sweep",
        "sendMultiSigToken": "delegate call to send multi sig token",
        "flushForwarderTokens": "delegate call to flush forwarder tokens",
        "batchFillOrKillOrders": "delegate call to batch fill of kill orders",
        "addLiquidity": "delegate call to add liquidity",
        "decimals": "delegate call to get decimals",
        "transferFrom": "delegate call to transfer token on behalf of the owner",
        "transfer": "delegate call to transfer token",
        "ethToTokenSwapInput": "delegate call for Ether to token swap input",
        "tokenToEthSwapInput": "delegate call for token to Ether swap input ",
        "removeLiquidity": "delegate call to remove liquidity",
        "ethToTokenSwapOutput": "delegate call for Ether to token swap output",
        "tokenToEthSwapOutput": "delegate call for token to Ether swap output",
        "tokenToTokenSwapInput": "delegate call for token to token swap input",
        "ethToTokenTransferInput": "delegate call for Ether to token transfer input",
        "getTokenToEthInputPrice": "delegate call to get token to Ether input price",
        "getEthToTokenOutputPrice": "delegate call to get Ether to token output price",
        "getEthToTokenInputPrice": "delegate call to get Ether to token input price",
        "fillOrder": "delegate call to fill an order",
        "tokenToTokenTransferOutput": "delegate call for token to token transfer output",
        "ethToTokenTransferOutput": "delegate call for Ether to token transfer output",
        "tokenToTokenSwapOutput": "delegate call for token to token swap output",
        "delegateBalanceOf": "delegate call for balance",
        "delegateTransfer": "delegate call for transfer",
        "getAttributeValue": "delegate call to get attribute value",
        "eitherHaveAttribute": "delegate call to either have attribute",
        "hasAttribute": "delegate call to have attribute",
        "delegateTransferFrom": "delegate call for transfer from",
        "tokenAddress": "delegate call for token address",
        "tokenToEthTransferInput": "delegate call for token to Ether transfer input",
        "transferBySystem": "delegate call to transfer by system",
        "approve": "delegate call to approve",
        "balanceOf": "delegate call for balance of",
        "allowance": "delegate call for allowance",
        "emitApprove": "delegate call to emit approve",
        "emitTransfer": "delegate call to emit transfer",
        "getAmountToGive": "delegate call to get amount to give",
        "staticExchangeChecks": "delegate call for static exchange checks",
        "performBuyOrder": "delegate call to perform buy order",
        "performSellOrder": "delegate call to perform sell order",
        "getAuctionIndex": "delegate call to get auction index",
        "getCurrentAuctionPrice": "delegate call to get current auction price",
        "requireCanTransferFrom": "delegate call to require can transfer from",
        "owner": "delegate call for owner",
        "invoke": "delegate call to invoke",
        "tokenToTokenTransferInput": "delegate call for token to token transfer input",
        "transferByUser": "delegate call to transfer by user",
        "submitTransactionToken": "delegate call to submit transaction token",
        "mintAllowed": "delegate call to mint allowed",
        "mintVerify": "delegate call to mint verify",
        "borrowAllowed": "delegate call to borrow allowed",
        "borrowVerify": "delegate call to borrow verify",
        "buy": "delegate call to buy",
        "invoke1CosignerSends": "delegate call to invoke 1 cosigner sends",
        "redeemAllowed": "delegate call to redeem allowed",
        "redeemVerify": "delegate call to redeem verify",
        "sell": "delegate call to sell",
        "repayBorrowAllowed": "delegate call to repay borrow allowed",
        "repayBorrowVerify": "delegate call to repay borrow verify",
        "unit": "delegate call for unit",
        "deposit": "delegate call for deposit",
        "getApp": "delegate call to get app",
        "liquidateBorrowAllowed": "delegate call to liquidate borrow allowed",
        "liquidateCalculateSeizeTokens": "delegate call to liquidate calculate seize tokens",
        "liquidateBorrowVerify": "delegate call to liquidate borrow verify",
        "seizeAllowed": "delegate call to seize allowed",
        "seizeVerify": "delegate call to seize verify",
        "execTransaction": "delegate call to execute transaction",
        "mint": "delegate call to mint new token",
        "getClearingTime": "delegate call to get clearing time",
        "getPriceInPastAuction": "delegate call to get price in past auction",
        "mintCToken": "delegate call to mint c token",
        "getAssetsIn": "delegate call to get assets in",
        "enterMarkets": "delegate call to enter markets",
        "transferAllowed": "delegate call allow transfer",
        "transferVerify": "delegate call to verify transfer",
        "borrow": "delegate call to borrow",
        "withdraw": "delegate call to withdraw",
        "mintWithEther": "delegate call to mint with Ether",
        "getMaxEscrowAmount": "delegate call to get maximum escrow amount",
        "borrowTokenFromEscrow": "delegate call to borrow token from escrow",
        "burnToToken": "delegate call to burn to token",
        "redeemCToken": "delegate call to redeem C token",
        "repayToken": "delegate call to repay token",
        "burnToEther": "delegate call to burn to Ether",
        "postBuyOrder": "delegate call for post buy order",
        "claimBuyerFunds": "delegate call to claim buyer funds",
        "triggerPosition": "delegate call to trigger position",
        "mintWithToken": "delegate call to mint with tokens",
        "rolloverPosition": "delegate call to rollover position",
        "burn": "delegate call to burn",
        "marginTradeFromDeposit": "delegate call to margin trade deposit",
        "claimLoanToken": "delegate call to claim loan token",
        "getAccountLiquidity": "delegate call to get account liquidity",
        "settleReserveTrade": "delegate call to settle reserve trade",
        "sellAllAmount": "delegate call to sell all amount",
        "trade": "delegate call to facilitate a token trade",
        "borrowTokenFromDeposit": "delegate call to borrow token from deposit",
        "hasPermission": "delegate call to have permission",
        "closeLoanNotifier": "delegate call to close loan notifier",
        "validateSignature": "delegate call to validate signature",
        "validateAddress": "delegate call to validate address",
        "buyAllAmount": "delegate call to buy all amount",
        "delegateAllowance": "delegate call to delegate allowance",
        "supplyInterestRate": "delegate call to supply interest rate",
        "assetBalanceOf": "delegate call for asset balance of",
        "sellAllAmountPayEth": "delegate call to sell all amount pay Ether",
        "sellAllAmountAndMigrateSai": "delegate call to sell all amount and migrate Sai",
        "batchSettleTrades": "delegate call to batch settle trades",
        "sellAllAmountBuyEth": "delegate call to sell all amount buy Ether",
        "getAccountSnapshot": "delegate call to get account snapshot",
        "buyAllAmountPayEth": "delegate call to buy all amount pay Ether",
        "onTransfer": "delegate call for on transfer",
        "borrowInterestRate": "delegate call for borrow interest rate",
        "closeFactorMantissa": "delegate call to close factor mantissa",
        "liquidateBorrow": "delegate call to liquidate borrow",
        "borrowBalanceStored": "delegate call to borrow balance stored",
        "validateNetworkTrades": "delegate call to validate network trades",
        "calculateNetworkTradeIncrements": "delegate call to calculate network trade increments",
        "calculateNetworkTradeDecrements": "delegate call to calculate network trade decrements",
        "createCompoundOrder": "delegate call to create compound order",
        "executeOrder": "delegate call to execute order",
        "init": "delegate call to initialize",
        "transferOwnership": "delegate call to transfer ownership",
        "borrowBalanceCurrent": "delegate call for borrow balance current",
        "exchangeRateCurrent": "delegate call for exchange rate current",
        "sellCompoundOrder": "delegate call to sell compound order",
        "isSold": "delegate call for is sold",
        "cycleNumber": "delegate call for cycle number",
        "sellOrder": "delegate call to sell order",
        "stake": "delegate call to stake",
        "buyTime": "delegate call to buy time",
        "orderType": "delegate call for order type",
        "compoundTokenAddr": "delegate call to compound token address",
        "redeemUnderlying": "delegate call to redeem underlying",
        "repayBorrow": "delegate call to repay a borrow",
        "payProtocolFee": "delegate call to pay protocol fee",
        "balanceDecreaseAllowed": "delegate call to balance decrease allowed",
        "calculateUserGlobalData": "delegate call to calculate user global data",
        "calculateCollateralNeededInETH": "delegate call to calculate collateral needed in Ether",
        "getReserveIsActive": "delegate call to get reserve is active",
        "getReserveIsFreezed": "delegate call to get reserve is frozen",
        "getReserveATokenAddress": "delegate call to get reserve token address",
        "updateStateOnDeposit": "delegate call to update state on deposit",
        "transferToReserve": "delegate call to transfer to reserve",
        "getReserveNormalizedIncome": "delegate call to get reserve normalized income",
        "accrueInterest": "delegate call to accrue interest",
        "seize": "delegate call to seize",
        "exchangeRateStored": "delegate call to exchange rate stored",
        "isReserveBorrowingEnabled": "delegate call for is reserve borrowing enabled",
        "getReserveAvailableLiquidity": "delegate call to get reserve available liquidity",
        "updateStateOnBorrow": "delegate call to update state on borrow",
        "transferToUser": "delegate call to transfer to user",
        "getReserves": "delegate call to get reserves",
        "getUserBasicReserveData": "delegate call to get user basic reserve date",
        "getReserveConfiguration": "delegate call to get reserve configuration",
        "getReserveDecimals": "delegate call to get reserve decimals",
        "setUserUseReserveAsCollateral": "delegate call to set user use reserve as collateral",
        "liquidationCall": "delegate call for liquidation call",
        "getUserUnderlyingAssetBalance": "delegate call to get user underlying asset balance",
        "isUserAllowedToBorrowAtStable": "delegate call for is user allowed to borrow as stable",
        "getMaxStableRateBorrowSizePercent": "delegate call to get max stable rate borrow size per cent",
        "isReserveUsageAsCollateralEnabled": "delegate call for is reserve usage as collateral enabled",
        "isUserUseReserveAsCollateralEnabled": "delegate call for is user use reserve as collateral enabled",
        "getUserBorrowBalances": "delegate call to get user borrow balances",
        "getReserveLiquidationBonus": "delegate call to get reserve liquidation bonus",
        "getUserOriginationFee": "delegate call to get user origination fee",
        "updateStateOnLiquidation": "delegate call to update state on liquidation",
        "liquidateFee": "delegate call to liquidate fess",
        "repay": "delegate call to repay",
        "updateStateOnRepay": "delegate call to update state on repay",
        "transferToFeeCollectionAddress": "delegate call to transfer to fee collection address",
        "updateStateOnRedeem": "delegate call to update state on redeem",
        "getUserReserveData": "delegate call to get user reserve data",
        "getUserCurrentBorrowRateMode": "delegate call to get user current borrow rate mode",
        "getReserveCurrentLiquidityRate": "delegate call to get reserver current liquidity rate",
        "getUserVariableBorrowCumulativeIndex": "delegate call to get user variable borrow cumulative",
        "getUserLastUpdate": "delegate call to get user last update",
        "getReserveCurrentVariableBorrowRate": "delegate call to get reserve current variable borrow rate",
        "getUserCurrentStableBorrowRate": "delegate call to get user current stable borrow rate",
        "tokenPrice": "delegate call for token price",
        "core": "delegate call for core",
        "name": "delegate call for name",
        "takeOrder": "delegate call for token order",
        "distribute": "delegate call to distribute",
        "redeem": "delegate call to redeem",
        "transferTokens": "delegate call to transfer token",
        "supplyRatePerBlock": "delegate call to supply rate per block",
        "LetsInvest": "delegate call to let's invest",
        "newImmediatePayment": "delegate call for new immediate payment",
        "forward": "delegate call to forward",
        "getScriptExecutor": "delegate call to get script executor",
        "executeMultipleLoginKeyMetaTransactions": "delegate call to execute multiple login key meta transactions",
        "executeMultipleMetaTransactions": "delegate call to execute multiple meta transactions",
        "supplyThroughProxy": "delegate call to supply through proxy",
        "swapOperation": "delegate call for swap operation",
        "flashLoan": "delegate call to flash loan",
        "getFlashLoanFeesInBips": "delegate call to get flash loan fees in bips",
        "swapCollateralPostLoan": "delegate call to swap collateral post loan",
        "updateStateOnFlashLoan": "delegate call to update state on flash loan",
        "getTokenToEthOutputPrice": "delegate call to get token to Ether output price",
        "exitPositions": "delegate call to exit positions",
        "exitPositionsPostLoan": "delegate call to exit positions post loan",
        "stakeXIO": "delegate call to stake XIO",
        "_idleSwap": "delegate call for idle swap",
        "exchange": "delegate call to exchange",
        "multiSend": "delegate call for multi send",
        "checkMembership": "delegate call to check membership",
        "getUserAccountData": "delegate call to get user account data",
        "inject": "delegate call to inject",
        "fillOrKillOrder": "delegate call to fill or kill an order (Zero Ex)",
        "create": "delegate call to create",
        "boostWithLoan": "delegate call to boost with loan",
        "cast": "delegate call to cast",
        "flashBorrow": "delegate call to flash borrow",
        "sellTwo": "delegate call to sell two",
        "flashPayback": "delegate call to flash payback",
        "isAuth": "delegate call for is auth",
        "version": "delegate call for version",
        "joinPool": "delegate call to join pool",
        "marketSellOrdersFillOrKill": "delegate call to execute market sell orders (Zero Ex)",
        "depositERC20": "delegate call to deposit ERC-20 token",
        "validateTokenAddress": "delegate call to validate token address",
        "tokenToEthTransferOutput": "delegate call for token to Ether transfer output",
        "swap": "delegate call to swap tokens",
        "refreshCompSpeeds": "delegate call to refresh comp speeds",
        "borrowRatePerBlock": "delegate call to borrow rate per block",
        "oracle": "delegate call to oracle",
        "calculateLoanOriginationFee": "delegate call to calculate loan origination fee",
        "executeVote": "delegate call to execute vote",
        "migrate": "delegate call to migrate",
        "enable": "delegate call to enable",
        "add": "delegate call to add",
        "migrateCompound": "delegate call to migrate compound",
        "remove": "delegate call to remove",
        "repayBorrowBehalf": "delegate call to repay a borrow belonging to a borrower",
        "disable": "delegate call to disable",
        "validateNonEmpty": "delegate call to validate non empty",
        "validateEqualLength": "delegate call to validate equal length",
        "joinswapExternAmountIn": "delegate call to join swap external amount in",
        "getSwapOutput": "delegate call to get swap output",
        "prepareSwapBassets": "delegate call to prepare swap bassets",
        "payback": "delegate call for payback",
        "flashMultiBorrow": "delegate call to flash multi borrow",
        "importPaybackBehalf": "delegate call to import payback behalf",
        "importCompound": "delegate call to import compound",
        "flashMultiPayback": "delegate call to flash multi payback",
        "getAmountByInput": "delegate call to get amount by input",
        "executeAction": "delegate call to execute action",
        "isValidSignature": "delegate call for is valid signature",
        "liquidationIncentiveMantissa": "delegate call for liquidation incentive mantissa",
        "distributeWithdrawals": "delegate call to distribute withdrawals",
        "executeActionWithAtomicBatchCalls": "delegate call to execute action with atomic batch calls",
        "_executeActionWithAtomicBatchCallsAtomic": "delegate call to execute action with atomic batch calls atomic",
        "tradeTokenForEther": "delegate call to trade token for Ether",
        "transformERC20": "delegate call to transfer ERC-20 token",
        "fillBridgeOrder": "delegate call to fill bridge order",
        "_spendERC20Tokens": "delegate call to spend ERC-20 tokens",
        "executeMultipleAuthKeyMetaTransactions": "delegate call to execute multiple auth key meta transactions",
        "initialize": "delegate call to initialize (2)",
        "tradeEtherForTokenUsingEtherizer": "delegate call to trade Ether",
        "triggerEtherTransfer": "delegate call to trigger Ether transfer",
        "delegateApprove": "delegate call to delegate approve",
        "tradeTokenForToken": "delegate call to trade token for token",
        "tradeDaiForToken": "delegate call to trade Dai for token",
        "transform": "delegate call to transform",
        "swapExactTokensForTokens": "delegate call to swap exact tokens for tokens",
        "swapETHForExactTokens": "delegate call to swap Ether for exact tokens (Uniswap)",
        "epoch": "delegate call to epoch",
        "lastDividendPoints": "delegate call to last dividend points",
        "setDividendPoints": "delegate call to set dividend points",
        "closeCdp": "delegate call to close Collateralized Debt Position",
        "execute": "delegate call execute",
        "approveExchange": "delegate call to approve exchange",
        "vote": "delegate call to vote",
        "migratePaybackBehalf": "delegate call to migrate payback behalf",
        "getAllMarkets": "delegate call to get all markets"
    },
    "factory_contract_map" : {
        "0x60a977354a6ba44310b2ee061bcf19632450e51d": "Share Token Factory",
        "0x67f53b749fe432274e3f53752a91da89ef86777e": "Map Factory",
        "0x518530aca60154403012f17c7b8e26f88f7494ee": "Market Factory",
        "0xbca52c29b535fd63bdc7ca35efa56116550f4c59": "Initial Reporter Factory",
        "0xe33ca1ebb783343035b11a7e755c29c28b763540": "Mailbox Factory",
        "0x1be98680ff697390cbc4cdc414a1be8add733bf7": "Dispute Crowdsourcer Factory",
        "0xe86a4beb10155a5bd7ebb430ce13438341e808a8": "Fee Token Factory",
        "0x5b4140771615b25f22a4bf52f77e35cdccc5b663": "Fee Window Factory",
        "0x240c61c9ac8b87bc70813be9ba069c0b45e83c9a": "Crowdsourcer (1) Factory",
        "0x30dddd46a281c431638be6228a7fee20b1bedbf1": "Accounting Factory",
        "0xeea0720d1d28dfb7b583d1d886668dc81367b259": "Disputer (1) Factory",
        "0xd82369aaec27c7a749afdb4eb71add9e64154cd6": "Root (1)",
        "0x57f1c2953630056aaadb9bfbda05369e6af7872b": "Root (2)",
        "0x14610b493f024c3636decbf7acbc201dfda44d47": "Crowdsourcer (2) Factory",
        "0x65b8f55457971cdaeef2fb1bc1ed01ac5d426922": "Accounting Factory",
        "0xecd4cf359a05a2b473c95ae68b2b0a7d432dfcc9": "Disputer (2) Factory",
        "0xe62e470c8fba49aea4e87779d536c5923d01bb95": "Universe Factory",
        "0x8fee0da3a35f612f88fb58d7028d14c7d99a3643": "Reputation Token Factory",
        "0x544df0bb3e35e5d79711a873849fe904b2349888": "Origin: Root (1), Unknown Factory",
        "0x4e1a2e6444a20f0fc4362e5600f083e6c9e28d74": "Origin: Root (2), Unknown Factory",
        "0x3d767a8b5cf066a455787a1245b721996a482697": "Share Token",
        "0xf9ae75ece490379187510753c48cc08a7f5035de": "Share Token",
        "0xdf04e4105382056cf56a3ad7791b5c3e3def362d": "Initial Reporter",
        "0x94a7980fceed5a0fe279007d3e95a254e782ee17": "Market",
        "0xf8ea17741c8e566e709901412ab7f8bfca9c105e": "Market",
        "0x0852c11dec27495443cfb147d09780a4895f4859": "Initial Reporter",
        "0x9096b499e9d0c3bd9c7a080c57a15139cbae59cb": "Initial Reporter",
        "0x59545683013766f0850b5f9e06eda93af999dace": "Map",
        "0x42417e742e17a5e9c21d6cd36ad34a7f2a4dc4e1": "Initial Reporter",
        "0x7ec4122cd00af0d462a178ecbda6a9c669ed7239": "Map"
    },
    "map_specific_known_contracts" : {
        "0xd5524179cb7ae012f5b642c1d6d700bbaa76b96b": "Delegator",
        "0x75228dce4d82566d93068a8d5d49435216551599": "main contract",
        "0x6c114b96b7a0e679c2594e3884f11526797e43d1": "Reputation Token",
        "0x4fa2b609c19edf731ec33f54f54602a92dfcde6d": "Initial Reporter",
        "0x380070670fb427ae8070631eef6f2d0824d8ce01": "Market",
        "0xfbcd5e4dbf9e95ce56d55cb3a4fd72415ca400ff": "Universe",
        "0x56cc82bbb3049dc3366bf26061d09ed3fd061881": "Fee Window",
        "0xe0dfed99988fcc9bdfa1f4fb0084942e1be6e2de": "Fee Token",
        "0x4dcb585b8c8c52c2d25d5a7c2672646bc24b3b66": "Mailbox",
        "0x94c01429d67a275de013e457eff6e028e10763d9": "Map",
        "0x2a21d90745dfed999aa0b6e08d648855c5f14663": "Share Token",
        "0x183614d40cee16bf6fcd9dff51556f398ec8d360": "Dispute Crowdsourcer",
        "0x9b4af4a3295cf476a2b00736f7332f35bbee960e": "Cash",
        "0xd0ba8692bc945efe0638313cab40ab8e4f83191a": "Orders",
        "0x3448209268e97652bb67ea12777d4dfba81e3aaf": "Cancel Order",
        "0x24e2b1d415e6e0d04042eaa45dc2a08fc33ca6cd": "Trade",
        "0x7f27b0598949dbf9e539bbd217f15bf3f5e97999": "Create Order"
    },
    "event_suffix_map" : {
        "ShareTokenFactory": " (token sharing factory)",
        "MapFactory": " (map factory)",
        "MarketFactory": " (market factory)",
        "InitialReporterFactory": " (initial reporter factory)",
        "MailboxFactory": " (mailbox factory)",
        "DisputeCrowdsourcerFactory": " (dispute crowdsourcer factory)",
        "FeeTokenFactory": " (fee token factory)",
        "FeeWindowFactory": " (fee window factory)",
        "CrowdsourcerFactory_1": " (crowdsourcer factory 1)",
        "AccountingFactory": " (accounting factory)",
        "DisputerFactory_1": " (disputer factory 1)",
        "RootDeployer_1": " (root deployer 1)",
        "RootDeployer_2": " (root deployer 2)",
        "CrowdsourcerFactory_2": " (crowdsourcer factory 2)",
        "DisputerFactory_2": " (disputer factory 2)",
        "UniverseFactory": " (universe factory)",
        "ReputationTokenFactory": " (REP tokens factory)",
        "unclear_1": "",
        "unclear_2": "",
        "unclear_3": "",
        "unclear_4": "",
        "unclear_5": "",
        "unclear_6": "",
        "unclear_7": "",
        "unclear_8": "",
        "unclear_9": "",
        "unclear_10": "",
        "unclear_11": "",
        "unlcear_12": "",
        "ShareTokenFactoryCreation": " (token sharing)",
        "MapFactoryCreation": " (map)",
        "MarketFactoryCreation": " (market)",
        "InitialReporterFactoryCreation": " (initial reporter)",
        "MailboxFactoryCreation": " (mailbox)",
        "DisputeCrowdsourcerFactoryCreation": " (dispute crowdsourcer)",
        "FeeTokenFactoryCreation": " (fee token)",
        "FeeWindowFactoryCreation": " (fee window)",
        "CrowdsourcerFactory_1Creation": " (crowdsourcer 1)",
        "AccountingFactoryCreation": " (accounting)",
        "DisputerFactory_1Creation": " (disputer 1)",
        "RootDeployer_1Creation": " (root deployer 1 creation)",
        "RootDeployer_2Creation": " (root deployer 2 creation)",
        "CrowdsourcerFactory_2Creation": " (crowdsourcer 2)",
        "DisputerFactory_2Creation": " (disputer 2)",
        "UniverseFactoryCreation": " (universe)",
        "ReputationTokenFactoryCreation": " (REP token through factory)",
        "RootDeployer_2CreationCreation": " (root deployer 2, creation level 2)",
        "ShareTokenFactoryCreationCreation": " (token sharing, creation level 2)",
        "InitialReporterFactoryCreationCreation": " (initial reporter, creation level 2)",
        "MarketFactoryCreationCreation": " (market, creation level 2)",
        "MapFactoryCreationCreation": " (map, creation level 2)",
        "Delegator": " (delegated)", 
        "main contract": " (main logic)",
        "ReputationToken": " (REP token)",
        "InitialReporter": " (initial reporter)",
        "Market": " (market)",
        "Universe": " (universe)",
        "FeeWindow": " (fee window)",
        "FeeToken": " (fee token)",
        "Mailbox": " (mailbox)",
        "Map": " (map)",
        "ShareToken": " (share token)",
        "DisputeCrowdsourcer": " (dispute)",
        "Cash": " (Cash)",
        "Orders": " (orders)",
        "CancelOrder": " (cancel order)",
        "Trade": " (trade)",
        "CreateOrder": " (create order)"
    }
}